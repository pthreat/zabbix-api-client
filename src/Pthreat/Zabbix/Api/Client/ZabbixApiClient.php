<?php declare(strict_types=1);namespace Pthreat\Zabbix\Api\Client;use GuzzleHttp\ClientInterface;use Pthreat\Zabbix\Api\Client\Exception\ZabbixApiClientException;class ZabbixApiClient implements ZabbixApiClientInterface{    private const JSON_RPC_PATH='/api_jsonrpc.php';    /**     * @var ClientInterface     */    private $client;    /**     * @var ?string     */    private $httpUser;    /**     * @var ?string     */    private $httpPass;    /**     * @var ?string     */    private $httpDigest;    /**     * @var string     */    private $zabbixToken;    public function __construct(        ClientInterface $client,        string $zabbixToken,        string $httpUser=null,        string $httpPassword=null,        string $httpDigest = null    )    {        $this->client = $client;        $this->zabbixToken = $zabbixToken;        $this->httpDigest = $httpDigest;        $this->httpUser = $httpUser;        $this->httpPass = $httpPassword;    }    /**     * {@inheritdoc}     */    public function post(string $method, array $params) : array    {        return $this->request('POST', $method, $params);    }    /**     * {@inheritdoc}     */    public function get(string $method, array $params) : array    {        return $this->request('GET', $method, $params);    }    /**     * {@inheritdoc}     */    public function put(string $method, array $params) : array    {        return $this->request('PUT', $method, $params);    }    /**     * {@inheritdoc}     */    public function delete(string $method, array $params) : array    {        return $this->request('DELETE', $method, $params);    }    //<editor-fold desc="Private methods">    private function getDefaultBody() : array    {        return [            'jsonrpc' => '2.0',            'auth' => $this->zabbixToken,            'id' => uniqid('zabbix_api_',false)        ];    }    private function request(        string $method,        string $zabbixMethod,        array $zabbixParameters    ) : array    {        $options = $this->getAuthenticationParameters();        $body = $this->getDefaultBody();        $body['method'] = $zabbixMethod;        $body['params'] = $zabbixParameters;        $options['json'] = $body;        try {            $result = json_decode(                $this->client->request($method, self::JSON_RPC_PATH, $options)                    ->getBody()                    ->getContents(),                true,                2048,                \JSON_PRETTY_PRINT            );        }catch(\Exception $e){            throw new ZabbixApiClientException($e->getMessage(),$e->getCode(),$e);        }        if(array_key_exists('error', $result)){            $msg = sprintf('%s - %s', $result['message'], $result['data']);            throw new ZabbixApiClientException($msg, $result['code']);        }        return is_array($result) ? $result : [];    }    private function getAuthenticationParameters() : array    {        if(null === $this->httpUser || null === $this->httpPass){            return [];        }        $options =  [            'auth' => [                $this->httpUser,                $this->httpPass            ]        ];        if(null !== $this->httpDigest) {            $options['auth'][] = $this->httpDigest;        }        return $options;    }    //</editor-fold>}